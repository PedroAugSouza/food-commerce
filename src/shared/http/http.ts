/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Food Commerce Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
export type AuthenticateUserControllerHandle201 = {
  access_token?: string;
};

export type FilterProductControllerHandleParams = {
  price: string;
  category: string;
};

export interface InputAuthenticateUserDTO {
  email: string;
  password: string;
}

export type InputRegisterUserDTORole =
  (typeof InputRegisterUserDTORole)[keyof typeof InputRegisterUserDTORole];

export const InputRegisterUserDTORole = {
  ADMIN: 'ADMIN',
  COMMOM: 'COMMOM',
} as const;

export interface InputRegisterUserDTO {
  email: string;
  username: string;
  password: string;
  role: InputRegisterUserDTORole;
}

export type OutputGetProductsProductsInChartProductsItem = {
  category?: string;
  description?: string;
  image?: string;
  name?: string;
  price?: string;
  uuid?: string;
};

export type OutputGetProductsProductsInChart = {
  amountProducts?: number;
  products?: OutputGetProductsProductsInChartProductsItem[];
};

export interface OutputGetProducts {
  totalValue: number;
  productsInChart: OutputGetProductsProductsInChart;
}

export interface OutputGetProductDTO {
  uuid: string;
  name: string;
  price: string;
  description: string;
  image: string;
  category: string;
}

export interface OutputFilterProductsDTO {
  uuid: string;
  name: string;
  price: string;
  description: string;
  image: string;
  category: string;
}

export interface OutputGetAllProductsDTO {
  uuid: string;
  name: string;
  price: string;
  description: string;
  image: string;
  category: string;
}

export interface OutputGetProductImageDTO {
  image: Blob;
}

export interface InputChangeAmountProductDTO {
  productUuid: string;
  cartUuid: string;
  amountProducts: number;
}

export interface InputRemoveProductDTO {
  productUuid: string;
  cartUuid: string;
}

export interface InputAddProductDTO {
  productsUuid: string;
  amountProducts: number;
  cartUuid: string;
}

export interface InputUpdateProductDTO {
  uuid: string;
  /** @nullable */
  name: string | null;
  /** @nullable */
  price: string | null;
  /** @nullable */
  description: string | null;
  /** @nullable */
  image: string | null;
  /** @nullable */
  category: string | null;
}

export interface IError {
  reason: string;
  message: string;
}

export type InputCreactProductDTOCategory =
  (typeof InputCreactProductDTOCategory)[keyof typeof InputCreactProductDTOCategory];

export const InputCreactProductDTOCategory = {
  DRINK: 'DRINK',
  FOOD: 'FOOD',
  COMBO: 'COMBO',
} as const;

export interface InputCreactProductDTO {
  name: string;
  price: string;
  description: string;
  image: Blob;
  category: InputCreactProductDTOCategory;
}

export const createProductControllerHandle = (
  inputCreactProductDTO: InputCreactProductDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  const formData = new FormData();
  formData.append('name', inputCreactProductDTO.name);
  formData.append('price', inputCreactProductDTO.price);
  formData.append('description', inputCreactProductDTO.description);
  formData.append('image', inputCreactProductDTO.image);
  formData.append('category', inputCreactProductDTO.category);

  return axios.post(`http://localhost:8000/product`, formData, options);
};

export const getCreateProductControllerHandleMutationOptions = <
  TData = Awaited<ReturnType<typeof createProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputCreactProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationKey = ['createProductControllerHandle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createProductControllerHandle>>,
    { data: InputCreactProductDTO }
  > = (props) => {
    const { data } = props ?? {};

    return createProductControllerHandle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: InputCreactProductDTO },
    TContext
  >;
};

export type CreateProductControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof createProductControllerHandle>>
>;
export type CreateProductControllerHandleMutationBody = InputCreactProductDTO;
export type CreateProductControllerHandleMutationError = AxiosError<IError>;

export const useCreateProductControllerHandle = <
  TData = Awaited<ReturnType<typeof createProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputCreactProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  TData,
  TError,
  { data: InputCreactProductDTO },
  TContext
> => {
  const mutationOptions =
    getCreateProductControllerHandleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const updateProductControllerHandle = (
  inputUpdateProductDTO: InputUpdateProductDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(
    `http://localhost:8000/product`,
    inputUpdateProductDTO,
    options,
  );
};

export const getUpdateProductControllerHandleMutationOptions = <
  TData = Awaited<ReturnType<typeof updateProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputUpdateProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationKey = ['updateProductControllerHandle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProductControllerHandle>>,
    { data: InputUpdateProductDTO }
  > = (props) => {
    const { data } = props ?? {};

    return updateProductControllerHandle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: InputUpdateProductDTO },
    TContext
  >;
};

export type UpdateProductControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProductControllerHandle>>
>;
export type UpdateProductControllerHandleMutationBody = InputUpdateProductDTO;
export type UpdateProductControllerHandleMutationError = AxiosError<IError>;

export const useUpdateProductControllerHandle = <
  TData = Awaited<ReturnType<typeof updateProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputUpdateProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  TData,
  TError,
  { data: InputUpdateProductDTO },
  TContext
> => {
  const mutationOptions =
    getUpdateProductControllerHandleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const addProductControllerHandle = (
  inputAddProductDTO: InputAddProductDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(`http://localhost:8000/cart`, inputAddProductDTO, options);
};

export const getAddProductControllerHandleMutationOptions = <
  TData = Awaited<ReturnType<typeof addProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputAddProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationKey = ['addProductControllerHandle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addProductControllerHandle>>,
    { data: InputAddProductDTO }
  > = (props) => {
    const { data } = props ?? {};

    return addProductControllerHandle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: InputAddProductDTO },
    TContext
  >;
};

export type AddProductControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof addProductControllerHandle>>
>;
export type AddProductControllerHandleMutationBody = InputAddProductDTO;
export type AddProductControllerHandleMutationError = AxiosError<IError>;

export const useAddProductControllerHandle = <
  TData = Awaited<ReturnType<typeof addProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputAddProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  TData,
  TError,
  { data: InputAddProductDTO },
  TContext
> => {
  const mutationOptions = getAddProductControllerHandleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const removeProductControllerHandle = (
  inputRemoveProductDTO: InputRemoveProductDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`http://localhost:8000/cart/remove`, {
    data: inputRemoveProductDTO,
    ...options,
  });
};

export const getRemoveProductControllerHandleMutationOptions = <
  TData = Awaited<ReturnType<typeof removeProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputRemoveProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationKey = ['removeProductControllerHandle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeProductControllerHandle>>,
    { data: InputRemoveProductDTO }
  > = (props) => {
    const { data } = props ?? {};

    return removeProductControllerHandle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: InputRemoveProductDTO },
    TContext
  >;
};

export type RemoveProductControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeProductControllerHandle>>
>;
export type RemoveProductControllerHandleMutationBody = InputRemoveProductDTO;
export type RemoveProductControllerHandleMutationError = AxiosError<IError>;

export const useRemoveProductControllerHandle = <
  TData = Awaited<ReturnType<typeof removeProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputRemoveProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  TData,
  TError,
  { data: InputRemoveProductDTO },
  TContext
> => {
  const mutationOptions =
    getRemoveProductControllerHandleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const changeAmountProductControllerHandle = (
  inputChangeAmountProductDTO: InputChangeAmountProductDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.patch(
    `http://localhost:8000/cart/update`,
    inputChangeAmountProductDTO,
    options,
  );
};

export const getChangeAmountProductControllerHandleMutationOptions = <
  TData = Awaited<ReturnType<typeof changeAmountProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputChangeAmountProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationKey = ['changeAmountProductControllerHandle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changeAmountProductControllerHandle>>,
    { data: InputChangeAmountProductDTO }
  > = (props) => {
    const { data } = props ?? {};

    return changeAmountProductControllerHandle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: InputChangeAmountProductDTO },
    TContext
  >;
};

export type ChangeAmountProductControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof changeAmountProductControllerHandle>>
>;
export type ChangeAmountProductControllerHandleMutationBody =
  InputChangeAmountProductDTO;
export type ChangeAmountProductControllerHandleMutationError =
  AxiosError<IError>;

export const useChangeAmountProductControllerHandle = <
  TData = Awaited<ReturnType<typeof changeAmountProductControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputChangeAmountProductDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  TData,
  TError,
  { data: InputChangeAmountProductDTO },
  TContext
> => {
  const mutationOptions =
    getChangeAmountProductControllerHandleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getImageProductControllerHandle = (
  image: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<OutputGetProductImageDTO>> => {
  return axios.get(`http://localhost:8000/product/image/${image}`, options);
};

export const getGetImageProductControllerHandleQueryKey = (image: string) => {
  return [`http://localhost:8000/product/image/${image}`] as const;
};

export const getGetImageProductControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof getImageProductControllerHandle>>,
  TError = AxiosError<OutputGetProductImageDTO>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getImageProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetImageProductControllerHandleQueryKey(image);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getImageProductControllerHandle>>
  > = ({ signal }) =>
    getImageProductControllerHandle(image, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!image,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getImageProductControllerHandle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetImageProductControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getImageProductControllerHandle>>
>;
export type GetImageProductControllerHandleQueryError =
  AxiosError<OutputGetProductImageDTO>;

export function useGetImageProductControllerHandle<
  TData = Awaited<ReturnType<typeof getImageProductControllerHandle>>,
  TError = AxiosError<OutputGetProductImageDTO>,
>(
  image: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getImageProductControllerHandle>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getImageProductControllerHandle>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetImageProductControllerHandle<
  TData = Awaited<ReturnType<typeof getImageProductControllerHandle>>,
  TError = AxiosError<OutputGetProductImageDTO>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getImageProductControllerHandle>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getImageProductControllerHandle>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetImageProductControllerHandle<
  TData = Awaited<ReturnType<typeof getImageProductControllerHandle>>,
  TError = AxiosError<OutputGetProductImageDTO>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getImageProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetImageProductControllerHandle<
  TData = Awaited<ReturnType<typeof getImageProductControllerHandle>>,
  TError = AxiosError<OutputGetProductImageDTO>,
>(
  image: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getImageProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetImageProductControllerHandleQueryOptions(
    image,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const filterProductControllerHandle = (
  params: FilterProductControllerHandleParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<OutputFilterProductsDTO[]>> => {
  return axios.get(`http://localhost:8000/products`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getFilterProductControllerHandleQueryKey = (
  params: FilterProductControllerHandleParams,
) => {
  return [
    `http://localhost:8000/products`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFilterProductControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof filterProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  params: FilterProductControllerHandleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof filterProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFilterProductControllerHandleQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof filterProductControllerHandle>>
  > = ({ signal }) =>
    filterProductControllerHandle(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof filterProductControllerHandle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FilterProductControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof filterProductControllerHandle>>
>;
export type FilterProductControllerHandleQueryError = AxiosError<unknown>;

export function useFilterProductControllerHandle<
  TData = Awaited<ReturnType<typeof filterProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  params: FilterProductControllerHandleParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof filterProductControllerHandle>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof filterProductControllerHandle>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFilterProductControllerHandle<
  TData = Awaited<ReturnType<typeof filterProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  params: FilterProductControllerHandleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof filterProductControllerHandle>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof filterProductControllerHandle>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFilterProductControllerHandle<
  TData = Awaited<ReturnType<typeof filterProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  params: FilterProductControllerHandleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof filterProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useFilterProductControllerHandle<
  TData = Awaited<ReturnType<typeof filterProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  params: FilterProductControllerHandleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof filterProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFilterProductControllerHandleQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductControllerHandle = (
  uuid: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<OutputGetProductDTO>> => {
  return axios.get(`http://localhost:8000/product/${uuid}`, options);
};

export const getGetProductControllerHandleQueryKey = (uuid: string) => {
  return [`http://localhost:8000/product/${uuid}`] as const;
};

export const getGetProductControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductControllerHandleQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductControllerHandle>>
  > = ({ signal }) =>
    getProductControllerHandle(uuid, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!uuid,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductControllerHandle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductControllerHandle>>
>;
export type GetProductControllerHandleQueryError = AxiosError<unknown>;

export function useGetProductControllerHandle<
  TData = Awaited<ReturnType<typeof getProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductControllerHandle>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductControllerHandle>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductControllerHandle<
  TData = Awaited<ReturnType<typeof getProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductControllerHandle>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductControllerHandle>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductControllerHandle<
  TData = Awaited<ReturnType<typeof getProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProductControllerHandle<
  TData = Awaited<ReturnType<typeof getProductControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductControllerHandleQueryOptions(uuid, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getProductsControllerHandle = (
  userUuid: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<OutputGetProducts>> => {
  return axios.get(`http://localhost:8000/cart/${userUuid}`, options);
};

export const getGetProductsControllerHandleQueryKey = (userUuid: string) => {
  return [`http://localhost:8000/cart/${userUuid}`] as const;
};

export const getGetProductsControllerHandleQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductsControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  userUuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProductsControllerHandleQueryKey(userUuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getProductsControllerHandle>>
  > = ({ signal }) =>
    getProductsControllerHandle(userUuid, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!userUuid,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductsControllerHandle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductsControllerHandleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductsControllerHandle>>
>;
export type GetProductsControllerHandleQueryError = AxiosError<unknown>;

export function useGetProductsControllerHandle<
  TData = Awaited<ReturnType<typeof getProductsControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  userUuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsControllerHandle>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsControllerHandle>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsControllerHandle<
  TData = Awaited<ReturnType<typeof getProductsControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  userUuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsControllerHandle>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsControllerHandle>>,
          TError,
          TData
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductsControllerHandle<
  TData = Awaited<ReturnType<typeof getProductsControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  userUuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetProductsControllerHandle<
  TData = Awaited<ReturnType<typeof getProductsControllerHandle>>,
  TError = AxiosError<unknown>,
>(
  userUuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getProductsControllerHandle>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductsControllerHandleQueryOptions(
    userUuid,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const registerUserControllerHandle = (
  inputRegisterUserDTO: InputRegisterUserDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:8000/register`,
    inputRegisterUserDTO,
    options,
  );
};

export const getRegisterUserControllerHandleMutationOptions = <
  TData = Awaited<ReturnType<typeof registerUserControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputRegisterUserDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationKey = ['registerUserControllerHandle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerUserControllerHandle>>,
    { data: InputRegisterUserDTO }
  > = (props) => {
    const { data } = props ?? {};

    return registerUserControllerHandle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: InputRegisterUserDTO },
    TContext
  >;
};

export type RegisterUserControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerUserControllerHandle>>
>;
export type RegisterUserControllerHandleMutationBody = InputRegisterUserDTO;
export type RegisterUserControllerHandleMutationError = AxiosError<IError>;

export const useRegisterUserControllerHandle = <
  TData = Awaited<ReturnType<typeof registerUserControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputRegisterUserDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  TData,
  TError,
  { data: InputRegisterUserDTO },
  TContext
> => {
  const mutationOptions =
    getRegisterUserControllerHandleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const authenticateUserControllerHandle = (
  inputAuthenticateUserDTO: InputAuthenticateUserDTO,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AuthenticateUserControllerHandle201>> => {
  return axios.post(
    `http://localhost:8000/login`,
    inputAuthenticateUserDTO,
    options,
  );
};

export const getAuthenticateUserControllerHandleMutationOptions = <
  TData = Awaited<ReturnType<typeof authenticateUserControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputAuthenticateUserDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationKey = ['authenticateUserControllerHandle'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authenticateUserControllerHandle>>,
    { data: InputAuthenticateUserDTO }
  > = (props) => {
    const { data } = props ?? {};

    return authenticateUserControllerHandle(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: InputAuthenticateUserDTO },
    TContext
  >;
};

export type AuthenticateUserControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof authenticateUserControllerHandle>>
>;
export type AuthenticateUserControllerHandleMutationBody =
  InputAuthenticateUserDTO;
export type AuthenticateUserControllerHandleMutationError = AxiosError<IError>;

export const useAuthenticateUserControllerHandle = <
  TData = Awaited<ReturnType<typeof authenticateUserControllerHandle>>,
  TError = AxiosError<IError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: InputAuthenticateUserDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  TData,
  TError,
  { data: InputAuthenticateUserDTO },
  TContext
> => {
  const mutationOptions =
    getAuthenticateUserControllerHandleMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getFilterProductControllerHandleResponseMock =
  (): OutputFilterProductsDTO[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      uuid: faker.string.alpha(20),
      name: faker.string.alpha(20),
      price: faker.string.alpha(20),
      description: faker.string.alpha(20),
      image: faker.string.alpha(20),
      category: faker.string.alpha(20),
    }));

export const getGetProductControllerHandleResponseMock = (
  overrideResponse: Partial<OutputGetProductDTO> = {},
): OutputGetProductDTO => ({
  uuid: faker.string.alpha(20),
  name: faker.string.alpha(20),
  price: faker.string.alpha(20),
  description: faker.string.alpha(20),
  image: faker.string.alpha(20),
  category: faker.string.alpha(20),
  ...overrideResponse,
});

export const getGetProductsControllerHandleResponseMock = (
  overrideResponse: Partial<OutputGetProducts> = {},
): OutputGetProducts => ({
  totalValue: faker.number.int({ min: undefined, max: undefined }),
  productsInChart: {
    amountProducts: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    products: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        category: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        description: faker.helpers.arrayElement([
          faker.string.alpha(20),
          undefined,
        ]),
        image: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        price: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
        uuid: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      })),
      undefined,
    ]),
  },
  ...overrideResponse,
});

export const getAuthenticateUserControllerHandleResponseMock = (
  overrideResponse: Partial<AuthenticateUserControllerHandle201> = {},
): AuthenticateUserControllerHandle201 => ({
  access_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  ...overrideResponse,
});

export const getCreateProductControllerHandleMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post('*/product', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getUpdateProductControllerHandleMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.patch('*/product', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getAddProductControllerHandleMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post('*/cart', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getRemoveProductControllerHandleMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete('*/cart/remove', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getChangeAmountProductControllerHandleMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.patch('*/cart/update', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getGetImageProductControllerHandleMockHandler = (
  overrideResponse?:
    | OutputGetProductImageDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OutputGetProductImageDTO> | OutputGetProductImageDTO),
) => {
  return http.get('*/product/image/:image', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getFilterProductControllerHandleMockHandler = (
  overrideResponse?:
    | OutputFilterProductsDTO[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OutputFilterProductsDTO[]> | OutputFilterProductsDTO[]),
) => {
  return http.get('*/products', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFilterProductControllerHandleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetProductControllerHandleMockHandler = (
  overrideResponse?:
    | OutputGetProductDTO
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OutputGetProductDTO> | OutputGetProductDTO),
) => {
  return http.get('*/product/:uuid', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProductControllerHandleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetProductsControllerHandleMockHandler = (
  overrideResponse?:
    | OutputGetProducts
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OutputGetProducts> | OutputGetProducts),
) => {
  return http.get('*/cart/:userUuid', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProductsControllerHandleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getRegisterUserControllerHandleMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.post('*/register', async (info) => {
    await delay(1000);
    if (typeof overrideResponse === 'function') {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 201 });
  });
};

export const getAuthenticateUserControllerHandleMockHandler = (
  overrideResponse?:
    | AuthenticateUserControllerHandle201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<AuthenticateUserControllerHandle201>
        | AuthenticateUserControllerHandle201),
) => {
  return http.post('*/login', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthenticateUserControllerHandleResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getFoodCommerceApiMock = () => [
  getCreateProductControllerHandleMockHandler(),
  getUpdateProductControllerHandleMockHandler(),
  getAddProductControllerHandleMockHandler(),
  getRemoveProductControllerHandleMockHandler(),
  getChangeAmountProductControllerHandleMockHandler(),
  getGetImageProductControllerHandleMockHandler(),
  getFilterProductControllerHandleMockHandler(),
  getGetProductControllerHandleMockHandler(),
  getGetProductsControllerHandleMockHandler(),
  getRegisterUserControllerHandleMockHandler(),
  getAuthenticateUserControllerHandleMockHandler(),
];
